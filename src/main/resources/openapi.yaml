openapi: 3.0.4
info:
  title: School API
  version: 1.0.0
  #  description: API para gestionar colegio
  description: |-
    API gestion school, this API is a simple example of how to use OpenAPI 3.0 with Spring Boot.

    Some useful links:
    - [Developer LinkedIn](https://www.linkedin.com)
    - [Repository GitHub](https://github.com/josephmn/msv-maven-student/blob/feature/issue0001/src/main/resources/openapi.yaml)
  termsOfService: https://swagger.io/terms/
  contact:
    email: developer.senior@example.pe
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8082
tags:
  - name: student
    description: Operations about student
  - name: teacher
    description: Operations about teacher
  - name: auth
    description: Operations about authentication
security:
  - bearerAuth: []
paths:
  /students:
    get:
      tags:
        - student
      summary: Get all student.
      security:
        - bearerAuth: []
      description: Get all student status.
      operationId: getAllStudents
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseStudentDto'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      tags:
        - student
      summary: Create student.
      security:
        - bearerAuth: []
      description: Create student in database.
      operationId: createStudent
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestStudentDto'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStudentDto'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /students/actives:
    get:
      tags:
        - student
      summary: Get all student actives.
      security:
        - bearerAuth: []
      description: Get all student status actives.
      operationId: getAllStudentsActives
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseStudentDto'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /students/{id}:
    get:
      tags:
        - student
      summary: Get student by ID.
      security:
        - bearerAuth: []
      description: Get student by ID.
      operationId: getStudentById
      parameters:
        - name: id
          in: path
          required: true
          description: Id of student
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStudentDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - student
      summary: Put student by ID.
      security:
        - bearerAuth: []
      description: Put student by ID.
      operationId: updateStudentById
      parameters:
        - name: id
          in: path
          required: true
          description: Id of student
          schema:
            type: integer
            format: int64
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestStudentDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStudentDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - student
      summary: Delete student by ID.
      security:
        - bearerAuth: []
      description: Delete student by ID.
      operationId: deleteStudentById
      parameters:
        - name: id
          in: path
          required: true
          description: Id of student
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTO'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /students/findByName/{name}:
    get:
      tags:
        - student
      summary: Get list student by name.
      security:
        - bearerAuth: []
      description: Get list student by name.
      operationId: getListStudentByName
      parameters:
        - name: name
          in: path
          required: true
          description: Name of student
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseStudentDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /students/findByLastName/{lastName}:
    get:
      tags:
        - student
      summary: Get list student by last name.
      security:
        - bearerAuth: []
      description: Get list student by last name.
      operationId: getListStudentByLastName
      parameters:
        - name: lastName
          in: path
          required: true
          description: Last name of student
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseStudentDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /students/updateByDocument/{document}:
    put:
      tags:
        - student
      summary: Put student by document.
      security:
        - bearerAuth: []
      description: Put student by document.
      operationId: updateStudentByDocument
      parameters:
        - name: document
          in: path
          required: true
          description: Document of student
          schema:
            type: string
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestStudentDto'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseStudentDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /teachers:
    get:
      tags:
        - teacher
      summary: Get all teacher.
      security:
        - bearerAuth: []
      description: Get all teacher.
      operationId: getAllTeachers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseTeacherDto'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      tags:
        - teacher
      summary: Create teacher.
      security:
        - bearerAuth: []
      description: Create teacher in database.
      operationId: createTeacher
      requestBody:
        description: Created teacher object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestTeacherDto'
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseTeacherDto'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      tags:
        - auth
      summary: Authenticate user.
      security: []
      description: Authenticate user in database.
      operationId: loginUser
      requestBody:
        description: Authenticate user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/register:
    post:
      tags:
        - auth
      summary: Register user for authenticate.
      security: []
      description: Register user for authenticate.
      operationId: registerUser
      requestBody:
        description: Register user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserDto'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    RequestStudentDto:
      type: object
      properties:
        document:
          type: string
          example: 78653423
        name:
          type: string
          example: Jhon
        lastName:
          type: string
          example: James
        status:
          type: boolean
          example: true
        age:
          type: integer
          format: int32
          example: 30

    ResponseStudentDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        document:
          type: string
          example: 78653423
        name:
          type: string
          example: Jhon
        lastName:
          type: string
          example: James
        status:
          type: boolean
          example: true
        age:
          type: integer
          format: int32
          example: 30

    RequestTeacherDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        document:
          type: string
          example: 45453245
        name:
          type: string
          example: John
        lastName:
          type: string
          example: James
        status:
          type: boolean
          example: true
        age:
          type: integer
          format: int32
          example: 30

    ResponseTeacherDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        document:
          type: string
          example: 45453245
        name:
          type: string
          example: John
        lastName:
          type: string
          example: James
        status:
          type: boolean
          example: true
        age:
          type: integer
          format: int32
          example: 30

    Error:
      type: object
      properties:
        code:
          type: string
          example: 'XXX'
        message:
          type: string
          example: 'Error message'
      required:
        - code
        - message

    ResponseDTO:
      type: object
      properties:
        code:
          type: string
          example: 'XXX'
        message:
          type: string
          example: 'Message response'
      required:
        - code
        - message

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: testuser
        password:
          type: string
          example: password123

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        tokenType:
          type: string
          example: Bearer
        username:
          type: string
          example: userTest
        roles:
          type: array
          items:
            type: string
          example: [USER, ADMIN]

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
        - role
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
          example: testuser
        password:
          type: string
          minLength: 6
          example: password123
        email:
          type: string
          format: email
          example: testuser@example.com
        role:
          type: string
          example: USER

    ResponseUserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: testuser
        password:
          type: string
          example: password123
        email:
          type: string
          format: email
          example:
        role:
          type: string
          example: USER
        enabled:
          type: boolean
          example: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
